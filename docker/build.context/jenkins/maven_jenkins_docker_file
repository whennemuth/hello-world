FROM jenkins
MAINTAINER Warren

# Beef up the memory
ENV JAVA_OPTS="-Xmx8192m -Dhudson.Util.noSymLink"

USER root

# Install nodejs and npm
RUN \
   apt-get update && \
   apt-get install -y nodejs && \
   apt-get install -y npm

# Copy selected system settings files to JENKINS_HOME so they do not have to be set through jenkins admin console.
# Jenkins will transfer these files to JENKINS_HOME, but we cannot transfer them there directly with COPY because
# once a volume has been declared with the VOLUME instruction, you cannot copy anything there.
COPY config.xml /usr/share/jenkins/ref/
COPY hudson.maven.MavenModuleSet.xml /usr/share/jenkins/ref/
COPY credentials.xml /usr/share/jenkins/ref/
COPY hudson.tasks.Maven.xml /usr/share/jenkins/ref/
COPY org.jenkinsci.plugins.docker.commons.tools.DockerTool.xml /usr/share/jenkins/ref/
RUN mkdir -p /usr/share/jenkins/ref/jobs/pull-all-jobs
COPY config-pull-all-jobs.xml /usr/share/jenkins/ref/jobs/pull-all-jobs/config.xml

# Create a directory to mount to later where the .ssh keys will be placed
# and create a directory for the mounted directory contents to be copied to (cannot change permissions of file in mounted directory).
RUN \
   mkdir /var/jenkins_ssh_mount && \
   mkdir /var/jenkins_ssh
COPY ssh_hosts /var/jenkins_ssh
RUN \
   chown -R jenkins:jenkins /var/jenkins_ssh && \
   chmod 766 /var/jenkins_ssh

# Copy in a script that processes the ssh keys and change its properties to be executable.
# NOTE: You cannot put this kind of stuff in /etc/init.d because a docker container is not really a virtual machine and does not have a functioning init system.
COPY jenkinsInit.sh /usr/local/bin/
RUN chmod ugo+x /usr/local/bin/jenkinsInit.sh

# Create an alternate maven repository location for jenkins
RUN mkdir -p /var/jenkins_m2repo

# Copy the settings.xml to an unmounted dir temporarily, later to be copied to the standard .m2 location to instruct maven to use the jenkins_m2repo dir
COPY settings.xml /usr/share/jenkins/ref/
RUN \
   chown -R jenkins:jenkins /var/jenkins_m2repo && \
   chmod -R 766 /var/jenkins_m2repo

# Turn off hostname hashing so that the host names are human-readable in the known_hosts files
RUN sed -i -- 's/HashKnownHosts yes/HashKnownHosts no/g' /etc/ssh/ssh_config

# Add github.com and any other names to the known_hosts for root so that attempts to make an ssh connection do not result in:
# "host key verification failed" 
# (NOTE: Alternatively you can be less secure and turn of host key checking:
#           rm ~/.ssh/config
#           echo >> ~/.ssh/config "Host *\n\tUser jenkins\n\tStrictHostKeyChecking no\n"
RUN mkdir /root/.ssh
# RUN ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts
COPY ssh_hosts /root/.ssh/
RUN \
   ssh-keyscan -t rsa -f /root/.ssh/ssh_hosts >> /root/.ssh/known_hosts && \
   cp /root/.ssh/ssh_hosts /var/jenkins_ssh

# Overriding the target url for jenkins plugins because of timeout issues probably due to mirroring
# From parent docker file: ENV JENKINS_UC https://updates.jenkins-ci.org
ENV JENKINS_UC_DOWNLOAD https://updates.jenkins.io/download

# Have the plugins.sh script (part of the jenkins image build context) load in jpi files for plugins from a text file listing. 
# Jenkins will install plugins not already there when the container starts.
COPY plugins.txt /usr/share/jenkins/ref/
RUN /usr/local/bin/plugins.sh /usr/share/jenkins/ref/plugins.txt

# Have the jenkins logs written out to a mounted volume
# Include the mount target directory when starting the container with a "-v" arg.
RUN \
   mkdir -p /var/log/jenkins && \
   chown -R  jenkins:jenkins /var/log/jenkins
VOLUME /var/log/jenkins
ENV JENKINS_OPTS="--prefix=/jenkins --logfile=/var/log/jenkins/jenkins.log"
# If not mounting a volume, you can still check the log from outside the container as follows:
# exec jenkins-master tail -f /var/log/jenkins/jenkins.log

# Build maven into the image.
ENV MAVEN_VERSION 3.3.9
RUN mkdir -p /usr/share/maven \
  && curl -fsSL http://apache.osuosl.org/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \
    | tar -xzC /usr/share/maven --strip-components=1 \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn
ENV MAVEN_HOME /usr/share/maven
# CMD ["mvn"]

ENTRYPOINT ["/bin/tini", "--", "/usr/local/bin/jenkinsInit.sh"]

USER jenkins

