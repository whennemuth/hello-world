FROM jenkins
MAINTAINER Warren

# Beef up the memory
ENV JAVA_OPTS="-Xmx8192m"

USER root

# Changing jenkins user and group ids so they don't conflict with the existing user on host.
RUN usermod -u 1001 jenkins    
RUN groupmod -g 1001 jenkins
# RUN find / -user 1000 -exec chown -h 1001 {} \;
# RUN find / -group 1000 -exec chgrp -h 1001 {} \;
RUN usermod -g 1001 jenkins

# Install nodejs and npm
RUN apt-get update
RUN apt-get install -y nodejs
RUN apt-get install -y npm

# Copy selected system settings files to /usr/share/jenkins/ref/ so they do not have to be set through jenkins admin console.
# Jenkins will transfer these files to JENKINS_HOME, but we cannot transfer them there directly with COPY because
# once a volume has been declared with the VOLUME instruction, you cannot copy anything there.
COPY config.xml /usr/share/jenkins/ref/
COPY credentials.xml /usr/share/jenkins/ref/
COPY hudson.tasks.Maven.xml /usr/share/jenkins/ref/
COPY org.jenkinsci.plugins.docker.commons.tools.DockerTool.xml /usr/share/jenkins/ref/
RUN mkdir -p /usr/share/jenkins/ref/jobs/pull-all-jobs
COPY config-pull-all-jobs.xml /usr/share/jenkins/ref/jobs/pull-all-jobs/config.xml

# Create a directory to mount to later where the .ssh keys will be placed
RUN mkdir /var/jenkins_ssh_mount
# Create a directory for the mounted directory contents to be copied to (cannot change permissions of file in mounted directory).
RUN mkdir /var/jenkins_ssh
# Copy in a script that processes the ssh keys and change its properties to be executable.
# NOTE: You cannot put this kind of stuff in /etc/init.d because a docker container is not really a virtual machine and does not have a functioning init system.
COPY jenkinsInit.sh /usr/local/bin/
RUN chmod ugo+x /usr/local/bin/jenkinsInit.sh

# Add github.com and any other names to the known_hosts for root so that attempts to make an ssh connection do not result in:
# "host key verification failed" 
RUN mkdir /root/.ssh
# RUN ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts
COPY ssh_hosts /root/.ssh/
RUN ssh-keyscan -t rsa -f /root/.ssh/ssh_hosts >> /root/.ssh/known_hosts

# Have the plugins.sh script (part of the jenkins image build context) load in jpi files for plugins from a text file listing. 
# Jenkins will install plugins not already when the container starts.
COPY plugins.txt /usr/share/jenkins/ref/
RUN /usr/local/bin/plugins.sh /usr/share/jenkins/ref/plugins.txt

# Have the jenkins logs written out to a mounted volume
# Include the mount target directory when starting the container with a "-v" arg.
RUN mkdir -p /var/log/jenkins
RUN chown -R  jenkins:jenkins /var/log/jenkins
VOLUME /var/log/jenkins
ENV JENKINS_OPTS="--logfile=/var/log/jenkins/jenkins.log"
# If not mounting a volume, you can still check the log from outside the container as follows:
# exec jenkins-master tail -f /var/log/jenkins/jenkins.log

# Build maven into the image.
ENV MAVEN_VERSION 3.3.9
RUN mkdir -p /usr/share/maven \
  && curl -fsSL http://apache.osuosl.org/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \
    | tar -xzC /usr/share/maven --strip-components=1 \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn
ENV MAVEN_HOME /usr/share/maven

ENTRYPOINT ["/bin/tini", "--", "/usr/local/bin/jenkinsInit.sh"]

USER jenkins

